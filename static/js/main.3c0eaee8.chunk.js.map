{"version":3,"sources":["contexts/ThemeContext.js","contexts/AuthContext.js","components/Navbar.js","contexts/BookContext.js","components/BookList.js","components/ThemeToggle.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","state","isLightTheme","light","syntax","ui","bg","dark","toggleTheme","_this","setState","react_default","a","createElement","Provider","value","Object","objectSpread","this","props","children","Component","AuthContext","AuthContextProvider","isAuthenticated","toggleAuth","Navbar","_useContext","useContext","_useContext2","theme","style","background","color","onClick","BookContext","BookContextProvider","_useState","useState","title","id","_useState2","slicedToArray","books","setBooks","BookList","className","map","book","key","ThemeToggle","App","contexts_ThemeContext","contexts_AuthContext","components_Navbar","contexts_BookContext","components_BookList","components_ThemeToggle","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c0eaee8.chunk.js","sourcesContent":["import React, { createContext, Component } from 'react';\n\nexport const ThemeContext = createContext();\n//create context jsx and it has provider to wrap the elements you need to pass props\nclass ThemeContextProvider extends Component {\n    state = {\n        isLightTheme: true,\n        light: { syntax: '#555', ui: '#ddd', bg: '#eee' },\n        dark: { syntax: '#ddd', ui: '#333', bg: '#555' }\n    }\n\n    toggleTheme = () => {\n        this.setState({ isLightTheme: !this.state.isLightTheme })\n    }\n    render() {\n        return (\n            <ThemeContext.Provider value={{ ...this.state, toggleTheme: this.toggleTheme }}>\n                {this.props.children}\n            </ThemeContext.Provider>\n        );\n    }\n}\n\nexport default ThemeContextProvider;","import React, { createContext, Component } from 'react';\n\nexport const AuthContext = createContext();\n\nclass AuthContextProvider extends Component {\n    state = {\n        isAuthenticated: false\n    }\n\n    toggleAuth = () => {\n        this.setState({ isAuthenticated: !this.state.isAuthenticated })\n    }\n    render() {\n        return (\n            <AuthContext.Provider value={{ ...this.state, toggleAuth: this.toggleAuth }}>\n                {this.props.children}\n            </AuthContext.Provider>);\n    }\n}\n\nexport default AuthContextProvider;","import React, { useContext } from 'react';\nimport { ThemeContext } from '../contexts/ThemeContext';\nimport { AuthContext } from '../contexts/AuthContext';\n\n\nconst Navbar = () => {\n    const { isAuthenticated, toggleAuth } = useContext(AuthContext);\n    const { isLightTheme, light, dark } = useContext(ThemeContext);\n    const theme = isLightTheme ? light : dark;\n    return (<nav style={{ background: theme.ui, color: theme.syntax }}>\n        <h1>Context App</h1>\n        <div onClick={toggleAuth}>\n            {isAuthenticated ? 'Logged In' : 'Logged Out'}\n        </div>\n        <ul>\n            <li>Home</li>\n            <li>About</li>\n            <li>Contact</li>\n        </ul>\n    </nav>);\n}\n\n\nexport default Navbar;","import React, { createContext, useState } from 'react';\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = (props) => {\n    const [books, setBooks] = useState([\n        { title: 'one piece', id: 1 },\n        { title: 'naruto', id: 2 },\n        { title: 'bleach', id: 3 },\n        { title: 'one punch', id: 4 },\n    ])\n    return (\n        <BookContext.Provider value={{ books, setBooks }}>\n            {props.children}\n        </BookContext.Provider >\n    );\n}\n\nexport default BookContextProvider;","import React, { useContext } from 'react';\nimport { ThemeContext } from '../contexts/ThemeContext';\nimport { BookContext } from '../contexts/BookContext';\n\n\nconst BookList = () => {\n    const { isLightTheme, light, dark } = useContext(ThemeContext);\n    const { books } = useContext(BookContext);\n    const theme = isLightTheme ? light : dark;\n    return (\n        <div className='book-list' style={{ background: theme.bg, color: theme.syntax }}>\n            <ul>\n                {books.map(book => {\n                    return <li style={{ background: theme.ui }} key={book.id}>{book.title}</li>\n                })}\n            </ul>\n        </div>\n    );\n}\n\n\n\nexport default BookList;","import React, { useContext } from 'react';\nimport { ThemeContext } from '../contexts/ThemeContext';\n\n\nconst ThemeToggle = () => {\n    const { toggleTheme } = useContext(ThemeContext);\n    return (<button onClick={toggleTheme}>\n        Toggle the theme\n</button>);\n}\n\nexport default ThemeToggle;","import React from 'react';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport ThemeToggle from './components/ThemeToggle';\nimport AuthContextProvider from './contexts/AuthContext';\nimport BookContextProvider from './contexts/BookContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeContextProvider>\n        <AuthContextProvider>\n          <Navbar />\n          <BookContextProvider>\n            <BookList />\n          </BookContextProvider>\n          <ThemeToggle />\n        </AuthContextProvider>\n      </ThemeContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}